{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../lib/contentlayer/types/page.ts", "../../../lib/contentlayer/utils/index.ts"],
  "sourcesContent": ["import { makeSource } from 'contentlayer/source-files';\n\nimport { Page } from './lib/contentlayer/types/page';\n\n\nexport default makeSource({\n  contentDirExclude: ['.DS_Store'],\n  contentDirPath: 'content',\n  documentTypes: [\n    Page,\n  ],\n});\n", "import { defineDocumentType } from 'contentlayer/source-files';\n\nimport { computeLocaleData } from '../utils';\n\nconst DIR = 'pages';\n\nexport const Page = defineDocumentType(() => ({\n  name: 'Page',\n  filePathPattern: `${DIR}/*/*.mdx`,\n  contentType: 'mdx',\n  fields: {\n    order: {\n      type: 'number',\n    },\n    title: {\n      type: 'string',\n      description: 'The title of the post',\n      required: true,\n    },\n  },\n  computedFields: {\n    ...computeLocaleData(DIR),\n  },\n}));\n", "import { AllTypes } from 'contentlayer/generated';\nimport path from 'path';\n\nexport function getSlugAndLocale(post: AllTypes) {\n  const result = path.basename(post._raw.sourceFileName, '.mdx').split('.').filter(Boolean);\n  if (result.length !== 2) throw new Error('NOPE');\n  return result as [string, string];\n}\n\nexport function computeLocaleData(dir: string) {\n  return {\n    locale: {\n      type: 'string' as const,\n      resolve: (post: AllTypes) => {\n        const [, locale] = getSlugAndLocale(post);\n        return locale;\n      },\n    },\n    slug: {\n      type: 'string' as const,\n      resolve: (post: AllTypes) => {\n        const [slug] = getSlugAndLocale(post);\n        return slug;\n      },\n    },\n    url: {\n      type: 'string' as const,\n      resolve: (post: AllTypes) => {\n        const [slug, locale] = getSlugAndLocale(post);\n        if (dir === 'pages') {\n          return `/${locale}/${slug}`;\n        }\n        return `/${locale}/${dir}/${slug}`;\n      },\n    },\n  };\n}\n"],
  "mappings": ";AAAA,SAAS,kBAAkB;;;ACA3B,SAAS,0BAA0B;;;ACCnC,OAAO,UAAU;AAEV,SAAS,iBAAiB,MAAgB;AAC/C,QAAM,SAAS,KAAK,SAAS,KAAK,KAAK,gBAAgB,MAAM,EAAE,MAAM,GAAG,EAAE,OAAO,OAAO;AACxF,MAAI,OAAO,WAAW;AAAG,UAAM,IAAI,MAAM,MAAM;AAC/C,SAAO;AACT;AAEO,SAAS,kBAAkB,KAAa;AAC7C,SAAO;AAAA,IACL,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,SAAS,CAAC,SAAmB;AAC3B,cAAM,CAAC,EAAE,MAAM,IAAI,iBAAiB,IAAI;AACxC,eAAO;AAAA,MACT;AAAA,IACF;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,SAAmB;AAC3B,cAAM,CAAC,IAAI,IAAI,iBAAiB,IAAI;AACpC,eAAO;AAAA,MACT;AAAA,IACF;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,SAAmB;AAC3B,cAAM,CAAC,MAAM,MAAM,IAAI,iBAAiB,IAAI;AAC5C,YAAI,QAAQ,SAAS;AACnB,iBAAO,IAAI,UAAU;AAAA,QACvB;AACA,eAAO,IAAI,UAAU,OAAO;AAAA,MAC9B;AAAA,IACF;AAAA,EACF;AACF;;;ADhCA,IAAM,MAAM;AAEL,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB,GAAG;AAAA,EACpB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,aAAa;AAAA,MACb,UAAU;AAAA,IACZ;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,GAAG,kBAAkB,GAAG;AAAA,EAC1B;AACF,EAAE;;;ADlBF,IAAO,8BAAQ,WAAW;AAAA,EACxB,mBAAmB,CAAC,WAAW;AAAA,EAC/B,gBAAgB;AAAA,EAChB,eAAe;AAAA,IACb;AAAA,EACF;AACF,CAAC;",
  "names": []
}
